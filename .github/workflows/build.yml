name: build-and-register-container

on:
  workflow_dispatch:
  
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  build:
    name: Build container
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checking out repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions


  deploy:
    needs: build
    name: Deploy container to ECS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checking out repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions
      
      - name: Login to Amazon ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit branch
        id: get-commit-branch
        run: echo "::set-output name=commit-branch::${{github.event.pull_request.head.ref}}"

      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"
      
      - name: Print current directory
        working-directory: .
        run: pwd
        
      - name: Build and push the tagged docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: deployment
          IMAGE_TAG: ${{ steps.get-commit-branch.outputs.commit-branch }}-${{ steps.get-timestamp.outputs.timestamp }}
          aws_secret_access_key : ${{ secrets.SECRET_KEY_SECRET_NAME }}
          aws_access_key_id : ${{ secrets.ACCESS_KEY_SECRET_NAME }}
          
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build --build-arg TRAINING=True -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        working-directory: .
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: src/deployment/task-definition.json
          container-name: deployment-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition (Create if needed)
        id: deploy-task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: deployment-cluster
          wait-for-service-stability: true
          force-new-deployment: true
        continue-on-error: true


      - name: Get ECS Cluster Network Configuration
        id: ecs_network_config
        run: |
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0a0682b751cd6b2f7" --query "Subnets[*].SubnetId" --output text)
          SECURITY_GROUP_ID=$(aws ecs describe-clusters --clusters deployment-cluster --query clusters[0].attachments[0].details[?name=='securityGroups'][0].value --output text)
      
          echo "::set-output name=subnet_ids::$SUBNET_IDS"
          echo "::set-output name=security_group_id::$SECURITY_GROUP_ID"

      - name: Run ECS Task
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster deployment-cluster \
            --task-definition deployment-task \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_ARRAY}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \ 
            --output text)

          echo "ECS Task ARN: $TASK_ARN"

          aws ecs wait tasks-stopped --cluster deployment-cluster --tasks $TASK_ARN

          TASK_STATUS=$(aws ecs describe-tasks --cluster deployment-cluster --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)

          echo "ECS Task Status: $TASK_STATUS"

          if [ "$TASK_STATUS" != "STOPPED" ]; then
            exit 1 # Fail the workflow if the task didn't stop successfully
          fi
        env:
          AWS_REGION: us-east-1 # Replace with your region

      # - name: Create ECS Service if it doesn't exist
      #   if = add : = steps.deploy-task.outcome == 'failure'
      #   run: |
      #     aws ecs create-service \
      #       --cluster deployment-cluster \
      #       --service-name deployment-service \
      #       --task-definition src/deployment/task-definition.json \
      #       --desired-count 1 \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=['subnet-YOUR_SUBNET_ID'],securityGroups=['sg-YOUR_SECURITY_GROUP_ID'],assignPublicIp=ENABLED}" \
      #       --platform-version LATEST
      #   env:
      #     AWS_REGION: us-east-1