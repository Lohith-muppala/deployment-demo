name: build-and-register-container

on:
  workflow_dispatch:
  
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

jobs:
  build:
    name: Build container
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checking out repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions


  deploy:
    needs: build
    name: Deploy container to ECS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checking out repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
          role-session-name: GitHubActions
      
      - name: Login to Amazon ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit branch
        id: get-commit-branch
        run: |
          echo "commit-branch = ${{github.event.pull_request.head.ref}}" >> $GITHUB_OUTPUT
          echo "commit-branch = ${{github.event.pull_request.head.ref}}" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: |
          echo "timestamp = $(date +'%Y-%m-%d-%H-%M')"  >> $GITHUB_ENV
          echo "timestamp = $(date +'%Y-%m-%d-%H-%M')"  >> $GITHUB_OUTPUT
      
      - name: Print current directory
        working-directory: .
        run: pwd
        
      - name: Build and push the tagged docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: deployment
          IMAGE_TAG: ${{ steps.get-commit-branch.outputs.commit-branch }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build --build-arg TRAINING=True -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        working-directory: .
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: src/deployment/task-definition.json
          container-name: deployment-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition (Create if needed)
        id: deploy-task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: deployment-service
          cluster: deployment-cluster
          wait-for-service-stability: true
        continue-on-error: true

      - name: Create ECS Service if it doesn't exist
        if: steps.deploy-task.outcome == 'failure'
        run: |
          aws ecs create-service \
            --cluster deployment-cluster \
            --service-name deployment-service \
            --task-definition src/deployment/task-definition.json \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=['subnet-YOUR_SUBNET_ID'],securityGroups=['sg-YOUR_SECURITY_GROUP_ID'],assignPublicIp=ENABLED}" \
            --platform-version LATEST
        env:
          AWS_REGION: us-east-1