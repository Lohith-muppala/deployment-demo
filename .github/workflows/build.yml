name: build-and-register-container

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: Emulate build step
    runs-on: ubuntu-latest

    steps:
    - name: Checking out repository
      uses: actions/checkout@v2

  deploy:
    needs: build
    name: Assume role
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.AWS_ROLE_FOR_GITHUB }}
        role-session-name: GitHubActions

    - name: Login to Amazon ECR
      id: login-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Get commit hash
      id: get-commit-hash
      run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
    - name: Get timestamp
      id: get-timestamp
      run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"
          

    - name: Build and push the tagged docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: deployment
        IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
      run: |
          docker build --build-arg TRAINING=True -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG